/*
 * This file is part of Insight.
 *
 * Copyright Â© 2015 Franklin "Snaipe" Mathieu <http://snaipe.me>
 *
 * Insight is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Insight is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Insight.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
#ifndef INSIGHT_INSIGHT_HH
# define INSIGHT_INSIGHT_HH

# include <memory>
# include <type_traits>

namespace Insight {

    class TypeInfo;
    class NamespaceInfo;
    class PointerTypeInfo;
    class PrimitiveTypeInfo;
    class StructInfo;
    class ConstTypeInfo;

    TypeInfo& type_of_(void *dummy_addr);
    TypeInfo& type_of_(std::string name);
    TypeInfo& type_of_(const std::type_info& info);

    NamespaceInfo& root_namespace();

};

template<typename T>
static Insight::TypeInfo& insight_type_of_impl__() {
    static T *insight_typeof_dummy [[gnu::used]] = nullptr;
    return Insight::type_of_(&insight_typeof_dummy);
}

template<typename T, typename E = void>
struct insight_type_of__ {
    static Insight::TypeInfo& call() {
        return insight_type_of_impl__<T>();
    }
};

template<typename T>
struct insight_type_of__<T, typename std::enable_if<std::is_class<T>::value && !std::is_const<T>::value>::type> {
    static Insight::StructInfo& call() {
        return dynamic_cast<Insight::StructInfo&>(insight_type_of_impl__<T>());
    }
};

template<class T>
struct is_complex : std::integral_constant<bool,
        std::is_same<T, _Complex float>::value ||
        std::is_same<T, _Complex double>::value ||
        std::is_same<T, _Complex long double>::value> {};

template<class T>
struct is_primitive : std::integral_constant<bool,
        !std::is_const<T>::value &&
            (std::is_integral<T>::value ||
             std::is_floating_point<T>::value ||
             is_complex<T>::value ||
             std::is_void<T>::value ||
             std::is_same<T, bool>::value)> {};

template<typename T>
struct insight_type_of__<T, typename std::enable_if<is_primitive<T>::value>::type> {
    static Insight::PrimitiveTypeInfo& call() {
        return dynamic_cast<Insight::PrimitiveTypeInfo&>(insight_type_of_impl__<T>());
    }
};

template<typename T>
struct insight_type_of__<T, typename std::enable_if<std::is_pointer<T>::value && !std::is_const<T>::value>::type> {
    static Insight::PointerTypeInfo& call() {
        return dynamic_cast<Insight::PointerTypeInfo&>(insight_type_of_impl__<T>());
    }
};

template<typename T>
struct insight_type_of__<T, typename std::enable_if<std::is_const<T>::value>::type> {
    static Insight::ConstTypeInfo& call() {
        return dynamic_cast<Insight::ConstTypeInfo&>(insight_type_of_impl__<T>());
    }
};

# ifdef __GNUC__
#  define insight_type_of(Thing) (insight_type_of__<__typeof__(Thing)>::call())
# else
#  define insight_type_of(Thing) (insight_type_of__<Thing>::call())
# endif

# ifndef type_of
#  define type_of insight_type_of
# endif

# include "types"

#endif /* !INSIGHT_INSIGHT_HH */
