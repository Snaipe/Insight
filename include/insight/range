/*
 * This file is part of Insight.
 *
 * Copyright Â© 2015 Franklin "Snaipe" Mathieu <http://snaipe.me>
 *
 * Insight is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Insight is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Insight.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
#ifndef INSIGHT_RANGE_H
# define INSIGHT_RANGE_H

# include <iterator>
# include <unordered_map>
# include <memory>

namespace Insight {

    template<typename T>
    using RangeCollection = std::unordered_map<std::string, std::shared_ptr<T>>;

    template<typename T>
    using WeakRangeCollection = std::unordered_map<std::string, std::weak_ptr<T>>;

    template<typename T, typename Collection>
    class BaseRangeIterator : public std::iterator<std::forward_iterator_tag, const T> {
    public:
        using Iterator = typename Collection::const_iterator;

        BaseRangeIterator(Iterator it) : wrapped(it) {}
        BaseRangeIterator(const BaseRangeIterator& other) : wrapped(other.wrapped) {}

        bool operator==(const BaseRangeIterator &other) const {
            return wrapped == other.wrapped;
        }

        bool operator!=(const BaseRangeIterator &other) const {
            return wrapped != other.wrapped;
        }

        BaseRangeIterator& operator=(const BaseRangeIterator& other) {
            wrapped = other.wrapped;
            return *this;
        }

        BaseRangeIterator& operator++() {
            wrapped++;
            return *this;
        }
    protected:
        Iterator wrapped;
    };

    template<typename T>
    class RangeIterator : public BaseRangeIterator<T, RangeCollection<T>> {
    using super = BaseRangeIterator<T, RangeCollection<T>>;
    using Iterator = typename RangeCollection<T>::const_iterator;
    public:
        RangeIterator(Iterator it) : super(it) {}
        RangeIterator(const super& other) : super(other) {}

        const T& operator*() const {
            return *super::wrapped->second;
        }
    };

    template<typename T>
    class WeakRangeIterator : public BaseRangeIterator<T, WeakRangeCollection<T>> {
    using super = BaseRangeIterator<T, WeakRangeCollection<T>>;
    using Iterator = typename WeakRangeCollection<T>::const_iterator;
    public:
        WeakRangeIterator(Iterator it) : super(it) {}
        WeakRangeIterator(const super& other) : super(other) {}

        const T& operator*() const {
            return *super::wrapped->second.lock();
        }
    };

    template<typename T>
    class Range {
    public:
        Range(const RangeCollection<T>& collection) : c(collection) {};
        RangeIterator<T> cbegin() const {
            return RangeIterator<T>(c.cbegin());
        }
        RangeIterator<T> cend() const {
            return RangeIterator<T>(c.cend());
        }
        RangeIterator<T> begin() const {
            return RangeIterator<T>(c.cbegin());
        }
        RangeIterator<T> end() const {
            return RangeIterator<T>(c.cend());
        }
    private:
        const RangeCollection<T>& c;
    };

    template<typename T>
    class WeakRange {
    public:
        WeakRange(const WeakRangeCollection<T>& collection) : c(collection) {};
        WeakRangeIterator<T> cbegin() const {
            return WeakRangeIterator<T>(c.cbegin());
        }
        WeakRangeIterator<T> cend() const {
            return WeakRangeIterator<T>(c.cend());
        }
        WeakRangeIterator<T> begin() const {
            return WeakRangeIterator<T>(c.cbegin());
        }
        WeakRangeIterator<T> end() const {
            return WeakRangeIterator<T>(c.cend());
        }
    private:
        const WeakRangeCollection<T>& c;
    };

}

#endif /* !INSIGHT_RANGE_H */
