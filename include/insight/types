/*
 * This file is part of Insight.
 *
 * Copyright Â© 2015 Franklin "Snaipe" Mathieu <http://snaipe.me>
 *
 * Insight is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Insight is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Insight.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
#ifndef INSIGHT_TYPES_HH
# define INSIGHT_TYPES_HH

# include <string>
# include "range"

namespace Insight {

    class Named {
    public:
        virtual const std::string& name() const = 0;
    };

    class TypeInfo : public Named {
    public:
        virtual size_t size_of() const = 0;
    };

    enum PrimitiveKind {
        UNKNOWN = 0,

        VOID,
        BOOL,
        CHAR,
        INT,
        FLOAT,
        DOUBLE,

        UNSIGNED                = 1 << 8,
        SHORT                   = 1 << 9,
        LONG                    = 1 << 10,
        LONG_LONG               = 1 << 11,
        COMPLEX                 = 1 << 12,

        SHORT_INT               = SHORT | INT,
        LONG_INT                = LONG | INT,
        LONG_LONG_INT           = LONG_LONG | INT,

        UNSIGNED_CHAR           = UNSIGNED | CHAR,
        UNSIGNED_SHORT_INT      = UNSIGNED | SHORT_INT,
        UNSIGNED_INT            = UNSIGNED | INT,
        UNSIGNED_LONG_INT       = UNSIGNED | LONG_INT,
        UNSIGNED_LONG_LONG_INT  = UNSIGNED | LONG_LONG_INT,

        LONG_DOUBLE             = LONG | DOUBLE,

        FLOAT_COMPLEX           = COMPLEX | FLOAT,
        DOUBLE_COMPLEX          = COMPLEX | DOUBLE,
        LONG_DOUBLE_COMPLEX     = COMPLEX | LONG_DOUBLE,

    };

    class PrimitiveTypeInfo : public TypeInfo {
    public:
        virtual PrimitiveKind kind() const = 0;
    };

    class MemberInfo : public Named {
    };

    class FieldInfo : public MemberInfo {
    public:
        virtual const TypeInfo& type() const = 0;
        virtual const size_t offset() const = 0;

        template<typename T, typename V>
        void set(T& instance, V value) const {
            V* target = reinterpret_cast<V*>(reinterpret_cast<char*>(&instance) + offset());
            *target = value;
        }
    };

    class NoSuchFieldException : public std::exception {

    };

    class MethodInfo : public MemberInfo {
    public:
        virtual const TypeInfo& return_type() const = 0;
        virtual const Range<TypeInfo> parameter_types() const = 0;
        virtual const void* address() const = 0;
        virtual const bool is_virtual() const = 0;

        template<typename R, typename T, typename ...Args>
        R call(T& instance, Args... args) const {
            using FuncType = R (*)(T*, Args...);
            const void* addr = address();
            if (!addr)
                throw std::runtime_error("No address for function " + name());
            FuncType func = reinterpret_cast<FuncType>(addr);
            return func(&instance, args...);
        }
    };

    class StructInfo : public TypeInfo {
    public:
        virtual const Range<MethodInfo> methods() const = 0;
        virtual const MethodInfo& method(std::string name) const = 0;
        virtual const Range<FieldInfo> fields() const = 0;
        virtual const FieldInfo& field(std::string name) const = 0;
    };

    class PointerTypeInfo : public TypeInfo {
    public:
        virtual TypeInfo& pointed_type() const = 0;
    };

    class ConstTypeInfo : public TypeInfo {
    public:
        virtual TypeInfo& type() const = 0;
    };

    class TypeDefInfo : public TypeInfo {
    public:
        virtual TypeInfo& aliased_type() const = 0;
    };

}

#endif /* !INSIGHT_TYPES_HH */
